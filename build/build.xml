<project name="DataLoader" default="all" basedir=".">

    <!-- global properties -->
    <property file="user.properties"/>
    <property file="build.properties"/>

    <condition property="platform" value="mac">
        <os family="mac"/>
    </condition>
    <condition property="platform" value="win32">
        <os family="windows"/>
    </condition>
    <condition property="platform" value="Linux">
        <os family="unix"/>
    </condition>

    <property environment="env"/>
    <property name="myjava.home" value="${env.JAVA_HOME}"/>

    <property name="conf.dir" value="${dataloader.home}/conf"/>
    <property name="build.dir" value="${dataloader.home}/build"/>

    <property name="dist.name" value="DataLoader"/>

    <!-- Directories -->
    <property name="src.dir" value="${dataloader.home}/src"/>

    <property name="javadoc.dir" value="${dataloader.home}/javadoc"/>
    <property name="classes.dir" value="${dataloader.home}/classes"/>
    <property name="lib.dir" value="${dataloader.home}/lib"/>
    <property name="wsc.jar" value="${lib.dir}/wsc.jar" />
    <property name="wsdlc.target" value="1.5" />
    <property name="partner.jar" value="${lib.dir}/partnerwsdl.jar" />
    <property name="swt.jar" value="${lib.dir}/${platform}/swt.jar"/>
    <property name="jar.dir" value="${dataloader.home}/jar"/>
    <property name="dataloader.jar" value="${jar.dir}/${dist.name}.jar"/>
    <property name="partner.wsdl" value="${dataloader.home}/resource/partner.wsdl"/>
    <property name="dist.dir" value="${dataloader.home}/dist"/>
    <property name="dist.zip" value="${dist.dir}/${dist.name}.zip"/>
    <property name="sample.dir" value="${dataloader.home}/sample"/>

    <!-- test-related -->
    <property name="junit.jar" value="${ant.home}/lib/junit.jar"/>
    <property name="test.dir" value="${dataloader.home}/test"/>
    <property name="test.src.dir" value="${test.dir}/java/src"/>
    <property name="test.classes.dir" value="${test.dir}/java/classes"/>
    <property name="test.files.dir" value="${test.dir}/testfiles"/>
    <property name="test.log.dir" value="${test.files.dir}/log"/>
    <property name="test.conf.dir" value="${test.files.dir}/conf"/>
    <property name="test.status.dir" value="${test.files.dir}/status"/>
    <property name="test.results.dir" value="${test.files.dir}/results"/>
    <property name="test.results.reportFile" value="${test.results.dir}/TESTS-TestSuites.xml"/>
    <property name="test.properties" value="${test.src.dir}/com/salesforce/dataloader/test.properties" />

    <property name="template.dir" value="${dataloader.home}/templates"/>

    <!-- DataLoader main entrypoint -->
    <property name="runner.class" value="com.salesforce.dataloader.process.DataLoaderRunner" />

    <path id="dataloader.classpath">
        <pathelement location="${classes.dir}"/>
        <fileset dir="${lib.dir}" includes="*.jar"/>
    	<pathelement location="${swt.jar}"/>
    </path>

    <path id="dataloader.jar.classpath">
        <pathelement location="${dataloader.jar}" />
    </path>

    <path id="wsc.classpath">
        <pathelement location="${wsc.jar}"/>
    </path>

    <path id="test.common.classpath">
        <pathelement location="${junit.jar}"/>
        <pathelement location="${test.classes.dir}"/>
    </path>

    <path id="test.classpath">
        <path refid="dataloader.classpath"/>
        <path refid="test.common.classpath"/>
    </path>

    <path id="test.jar.classpath">
        <path refid="dataloader.jar.classpath"/>
        <path refid="test.common.classpath"/>
    </path>

    <!-- targets start here -->

    <target name="all" depends="compile_all,jar_dataloader"/>

    <target name="clean_autogen">
        <delete failonerror="false">
            <fileset dir="${test.conf.dir}" includes="*-conf.xml" />
            <fileset dir="${dataloader.home}" includes=".classpath" />
            <fileset file="${test.properties}" />
        </delete>
    </target>

    <target name="clean_partnerwsdl">
        <delete file="${partner.jar}" failonerror="false"/>
    </target>

    <target name="clean_dataloader_jar">
        <delete dir="${jar.dir}" failonerror="false"/>
    </target>

    <target name="clean_dist">
        <delete file="${dist.dir}" failonerror="false"/>
    </target>

    <target name="clean_javadoc">
        <delete dir="${javadoc.dir}" failonerror="false" />
    </target>

    <target name="clean_classes">
        <delete dir="${classes.dir}" failonerror="false"/>
    </target>

    <target name="clean_classes_test">
        <delete dir="${test.classes.dir}" failonerror="false"/>
    </target>

    <target name="clean_test_output">
        <delete dir="${test.results.dir}" failonerror="false"/>
        <delete dir="${test.log.dir}" failonerror="false"/>
        <delete dir="${test.status.dir}" failonerror="false"/>
    </target>

    <target name="clean" depends="clean_classes,clean_classes_test" />

    <target name="testclean" depends="clean,clean_test_output" />

    <target name="distclean" depends="testclean,clean_autogen,clean_partnerwsdl,clean_dataloader_jar,clean_dist,clean_javadoc" />

    <target name="jar_partnerwsdl.deps">
        <dependset>
            <srcfileset file="${partner.wsdl}"/>
            <srcfileset file="${wsc.jar}"/>
            <targetfileset file="${partner.jar}"/>
        </dependset>
        <available property="jar_partnerwsdl.skip" file="${partner.jar}" value="1"/>
    </target>

    <target name="jar_partnerwsdl" depends="jar_partnerwsdl.deps" unless="jar_partnerwsdl.skip">
        <echo message="compiling wsdl"/>
        <java classname="com.sforce.ws.tools.wsdlc" fork="true" classpathref="wsc.classpath">
            <arg line="${partner.wsdl}"/>
            <arg line="${partner.jar}"/>
            <sysproperty key="compileTarget" value="${wsdlc.target}"/>
        </java>
    </target>

    <macrodef name="generateFromTemplate">
        <attribute name="dir"/>
        <attribute name="file"/>
    	<attribute name="token"/>
    	<attribute name="value"/>
        <sequential>
            <delete file="@{dir}/@{file}" failonerror="false"/>
            <copy file="${template.dir}/@{file}" tofile="@{dir}/@{file}">
                <filterset>
    	            <filter token="@{token}" value="@{value}"/>
    	        </filterset>
    	    </copy>
        </sequential>
    </macrodef>

	<target name="autogenAll" depends="testProps">
		<generateFromTemplate dir="${dataloader.home}" file=".classpath" token="OS" value="${platform}"/>
		<generateFromTemplate dir="${test.conf.dir}" file="process-conf.xml" token="TEST_FILE_DIR" value="${test.files.dir}"/>
		<generateFromTemplate dir="${test.conf.dir}" file="database-conf.xml" token="TEST_DB" value="${test.database.url}" />
		<generateFromTemplate dir="${test.conf.dir}" file="log-conf.xml" token="LOG_LEVEL" value="${test.log.level}" />
	</target>

    <target name="testProps">
        <echoproperties destfile="${test.properties}">
            <propertyset>
                <propertyref prefix="test." />
            </propertyset>
        </echoproperties>
    </target>

    <target name="pre" depends="autogenAll,jar_partnerwsdl"/>

    <target name="compile_all" depends="compile_test" description="Compile java and test"/>

    <target name="compile" depends="pre" description="Compile java only">
        <mkdir dir="${classes.dir}"/>
        <javac srcdir="${src.dir}" destdir="${classes.dir}" deprecation="${javac.deprecation}" debug="on" classpathref="dataloader.classpath" source="1.5" target="1.5"/>

        <copy todir="${classes.dir}">
            <fileset dir="${src.dir}" includes="*.dll **/*.gif **/*.bmp **/*.properties" />
        </copy>
    </target>

    <target name="compile_test" depends="compile" description="Compile tests">
        <mkdir dir="${test.classes.dir}"/>
        <javac srcdir="${test.src.dir}" destdir="${test.classes.dir}" deprecation="${javac.deprecation}" debug="on" classpathref="test.classpath" source="1.5" target="1.5"/>
        <copy todir="${test.classes.dir}">
            <fileset dir="${test.src.dir}">
                <include name="**/*.properties" />
            </fileset>
        </copy>
    </target>

    <target name="jar_dataloader.deps" depends="compile">
        <dependset>
            <srcfileset dir="${lib.dir}" includes="*.jar"/>
            <srcfileset file="${swt.jar}"/>
            <srcfileset dir="${classes.dir}" includes="**/*"/>
            <targetfileset file="${dataloader.jar}"/>
        </dependset>
        <available property="jar_dataloader.skip" file="${dataloader.jar}" value="1"/>
    </target>

    <!-- jars the loader into an executable jar-->
    <target name="jar_dataloader" depends="jar_dataloader.deps" description="Creates the dataloader distribution jar" unless="jar_dataloader.skip">
    	<mkdir dir="${jar.dir}"/>
        <tempfile property="jar.tmp.dir" prefix="jar.tmp."/>
        <mkdir dir="${jar.tmp.dir}"/>
        <unjar dest="${jar.tmp.dir}">
            <fileset dir="${lib.dir}" includes="*.jar"/>
            <fileset file="${swt.jar}" />
        </unjar>
        <jar jarfile="${dataloader.jar}">
            <fileset dir="${classes.dir}"/>
            <fileset dir="${jar.tmp.dir}"/>
            <manifest>
                <attribute name="Main-Class" value="${runner.class}"/>
            </manifest>
        </jar>
        <delete dir="${jar.tmp.dir}"/>
    </target>

    <target name="run_dataloader" description="Runs dataloader">
        <java fork="true" failonerror="true" classname="com.salesforce.dataloader.process.DataLoaderRunner" classpathref="dataloader.classpath">
            <jvmarg value="-Xmx${java.heap}"/>
            <jvmarg value="-Dsalesforce.config.dir=${conf.dir}"/>
        </java>
    </target>

    <target name="run_process" description="Runs a Batch Process">
        <java fork="true" failonerror="true" classname="com.salesforce.dataloader.process.ProcessRunner" classpathref="dataloader.classpath">
            <jvmarg value="-Dsalesforce.config.dir=${conf.dir}"/>
        </java>
    </target>

    <presetdef name="baseEncrypt">
        <java fork="true" failonerror="true" classpathref="dataloader.classpath"
              classname="com.salesforce.dataloader.security.EncryptionUtil" />
    </presetdef>

    <target name="encryptPassword">
        <fail unless="password.clear" message="Need to set property 'password.clear' (i.e. -Dpassword.clear=&lt;cleartext password&gt;)"/>

        <baseEncrypt outputProperty="password.enc">
            <arg value="-e"/>
            <arg value="${password.clear}"/>
            <arg value="${password.keyfile}"/>
        </baseEncrypt>
    	<echo message="${password.enc}"></echo>
    </target>

    <target name="encryptKey">
        <fail message="Need to set property 'password.seed' and 'password.keyfile' (i.e. -Dpassword.seed=&lt;my seed text&gt; -Dpassword.keyfile=&lt;mykeyfile.txt&gt;)">
            <condition>
                <and>
                    <not><isset property="password.seed"/></not>
                    <not><isset property="password.keyfile"/></not>
                </and>
            </condition>
        </fail>

        <baseEncrypt outputProperty="password.key">
            <arg value="-g"/>
            <arg value="${password.seed}"/>
        </baseEncrypt>

        <echo file="password.keyfile">${password.key}</echo>
    </target>

    <target name="encryptVerify">
        <fail message="Need to set property 'password.enc' and 'password.clear' (i.e. -Dpassword.enc=&lt;my encrypted password&gt; -Dpassword.clear=&lt;my cleartext password&gt;)">
            <condition>
                <and>
                    <not><isset property="password.enc"/></not>
                    <not><isset property="password.clear"/></not>
                </and>
            </condition>
        </fail>

        <baseEncrypt>
            <arg value="-v"/>
            <arg value="${password.enc}"/>
            <arg value="${password.clear}"/>
            <arg value="${password.keyfile}"/>
        </baseEncrypt>
    </target>

    <target name="test" depends="compile_test" description="Runs a unit test. Use -Dtestcase=TestClassName to run an individual test case.">

        <!-- Default the runFlags to empty string -->
        <property name="runFlag1" value="-Dfoo=bar"/>
        <property name="runFlag2" value="-Dfoo=bar"/>
        <property name="runFlag3" value="-Dfoo=bar" />
        <property name="runFlag4" value="-Dfoo=bar" />

        <echo message="*** Cleaning up test results output"/>

        <delete failonerror="false">
            <fileset dir="${test.results.dir}">
               <include name="**/*"/>
            </fileset>
        </delete>
        <mkdir dir="${test.status.dir}"/>
		<mkdir dir="${test.results.dir}" />
		<property name="testcase" value="AllTests" />
        <echo message="*** Running test ${testcase} from source directory ${test.src.dir}"/>
        <junit fork="yes" haltonfailure="no" showoutput="yes">
            <classpath refid="test.classpath"/>
            <formatter type="xml" usefile="true"/>
            <jvmarg value="-Ddataloader.dir=${dataloader.home}"/>
			<jvmarg value="-ea" />
            <jvmarg value="-Xmx${java.heap}"/>
            <jvmarg value="-XX:MaxPermSize=96m"/>
            <jvmarg value="${runFlag1}" />
            <jvmarg value="${runFlag2}" />
            <jvmarg value="${runFlag3}" />
            <jvmarg value="${runFlag4}" />

            <batchtest if="testcase" todir="${test.results.dir}">
                <fileset dir="${test.src.dir}" includes="**/${testcase}.java"/>
                <fileset dir="${test.src.dir}" includes="**/${testcase}Test.java"/>
                <fileset dir="${test.src.dir}" includes="**/${testcase}/*Test.java"/>
            </batchtest>
        </junit>
        <echo message="*** Generating test report to ${test.results.dir}/TESTS-TestSuites.xml"/>
        <junitreport todir="${test.results.dir}">
            <fileset dir="${test.results.dir}">
               <include name="TEST-*.xml"/>
            </fileset>
            <report format="noframes" todir="${test.results.dir}" styledir="."/>
        </junitreport>

    </target>

    <target name="testProfile" description="Profile a unit test case. Use -Dtestcase=TestClassName to run an individual test case.">
        <!-- call the actual test -->
        <property name="runFlag4" value="-Xrunhprof:cpu=samples,depth=16,heap=sites" />
        <antcall target="test"/>
    </target>

    <target name="testAllJar">
        <property name="testClasspathProperty" value="test.jar.classpath"/>
        <antcall target="testAllImpl"/>
    </target>

    <target name="testAll">
        <property name="testClasspathProperty" value="test.classpath"/>
        <antcall target="testAllImpl"/>
    </target>

    <target name="testAllImpl" description="Runs unit test suite, generates the test report and emails the report.">

        <echo message="*** Cleaning up test results output"/>
        <mkdir dir="${test.results.dir}"/>
        <delete failonerror="false">
            <fileset dir="${test.results.dir}">
               <include name="**/*"/>
            </fileset>
        </delete>

        <echo message="*** Running all tests in source directory ${test.src.dir}, classpath=${testClasspathProperty}"/>
        <junit fork="yes" haltonfailure="no" showoutput="yes">
            <classpath refid="${testClasspathProperty}"/>
            <classpath refid="test.classpath"/>
            <formatter type="xml" usefile="true"/>

            <jvmarg value="-Ddataloader.dir=${dataloader.home}"/>
            <jvmarg value="-ea" />
            <jvmarg value="-Xmx${java.heap}"/>
            <jvmarg value="-XX:MaxPermSize=96m"/>

            <batchtest todir="${test.results.dir}">
                <fileset dir="${test.src.dir}" includes="com/salesforce/dataloader/AllTests.java"/>
            </batchtest>
        </junit>

        <echo message="*** Generating test report to ${test.results.reportFile}"/>
        <junitreport todir="${test.results.dir}">
            <fileset dir="${test.results.dir}">
               <include name="TEST-*.xml"/>
            </fileset>
            <report format="noframes" todir="${test.results.dir}" styledir="."/>
        </junitreport>

    </target>

    <target name="testEmail" description="Sends the test report to recepients specified by emailToList property">
        <property name="test.emailSubjectFile" value="${test.results.dir}/testSubject.out"/>
        <xslt style="testSubject.xsl" basedir="." in="${test.results.reportFile}" out="${test.emailSubjectFile}"/>
        <loadfile property="test.emailSubject" srcfile="${test.emailSubjectFile}" >
            <filterchain>
                <striplinebreaks/>
            </filterchain>
        </loadfile>

        <delete file="${test.emailSubjectFile}"/>

        <echo message="*** Sending test report ${test.results.reportFile} to ${test.emailToList}"/>
        <mail from="dataloaderTest@sfdcqa.com"
              tolist="${test.emailToList}"
              mailhost="mail.internal.salesforce.com"
              subject="${test.emailSubjectPrefix} - ${test.emailSubject}"
              messagemimetype="text/html"
              messagefile="${test.results.dir}/junit-noframes.html"
	      	  encoding="plain"/>
    </target>

    <target name="autobuild">
        <tstamp>
            <format property="startTime" pattern="yyyy-MM-dd_HHmmss" locale="en"/>
        </tstamp>

        <mkdir dir="${test.log.dir}"/>
        <!-- start test logging -->
        <echo message="*** Logging to file ${test.log.dir}/autobuild${startTime}.log"/>
        <record name="${test.log.dir}/autobuild${startTime}.log" action="start"/>

        <!-- build source and test -->
        <antcall target="compile_all"/>

        <!-- run the complete test suite -->
        <antcall target="testAll"/>

        <!-- email the report -->
        <antcall target="testEmail"/>

        <!-- end test logging -->
        <record name="${test.log.dir}/autobuild${startTime}.log" action="stop"/>
    </target>

    <target name="autobuildTest" description="Local autobuild and test run">
        <property name="test.emailSubjectPrefix" value="${api.version} Local Test Run"/>
        <property name="test.emailToList" value="${dlist.test}"/>
        <antcall target="autobuild"/>
    </target>

    <target name="testWithEmail" depends="test" description="Runs a test case and emails the results">
            <property name="test.emailSubjectPrefix" value="${api.version} Test Suite Run: ${testcase}" />
            <property name="test.emailToList" value="${dlist.test}" />
            <antcall target="testEmail" />
    </target>

	<!-- build internal test distribution target -->
    <target name="dist" depends="jar_dataloader">

        <delete dir="${dist.dir}"/>

        <mkdir dir="${dist.dir}"/>
        <mkdir dir="${dist.dir}/temp"/>

        <copy todir="${dist.dir}/temp/jar">
            <fileset file="${dataloader.jar}"/>
        </copy>

        <copy todir="${dist.dir}/temp/conf">
            <fileset dir="${conf.dir}"/>
        </copy>

        <copy todir="${dist.dir}/temp/sample">
            <fileset dir="${sample.dir}"/>
        </copy>

        <copy todir="${dist.dir}/temp/">
            <fileset dir="${dataloader.home}" includes="**/*.bat **/*.dll" />
        </copy>

        <zip destfile="${dist.dir}/${dist.name}.zip"
            basedir="${dist.dir}/temp"/>
        <delete dir="${dist.dir}/temp"/>
    </target>

    <target name="javadoc" description="generate java documentation">
        <javadoc destdir="${javadoc.dir}" author="true" version="true" use="true" windowtitle="AppExchange DataLoader API" packagenames="com.*,org.*">

            <fileset dir="${src.dir}" defaultexcludes="yes">
                <include name="**/*.java"/>
            </fileset>
            <fileset dir="${test.dir}" defaultexcludes="yes">
                <include name="**/*.java"/>
            </fileset>
        </javadoc>
    </target>

    <target name="testrecords" description="create/delete/upsert records for testing">
        <echo message="arguments: -n ${records.numRecords} -o ${records.operation} -q ${records.query}"/>
        <java classname="com.salesforce.dataloader.util.TestRecordsUtil" fork="true" classpathref="test.classpath">
            <jvmarg value="-Dsalesforce.config.dir=${test.conf.dir}"/>
            <arg line="-n ${records.numRecords}"/>
            <arg line="-o ${records.operation}"/>
            <arg line="-q ${records.query}"/>
        </java>
    </target>
	
</project>
