[Do | Do...Until]
Do
    statements
    ...
Until |<expression>
;
[For | For...Next] 
For <variable> = <start> To <stop> [Step <stepval>]
    statements
    ...
;
[Func | Func...EndFunc]
Func functioname ( [ByRef] $param1, ..., [ByRef] $paramN)
    ...
    [Return [value]]
EndFunc
;
[If...Then | If...Then]
If <expression> Then statement
;
[If...ElseIf...Else...EndIf | If...ElseIf...Else...EndIf ]
If <expression> Then
    statements
    ...
ElseIf expression-n Then
    ElseIf statements ... 
    ...
Else
    Else statements
    ...
EndIf
;
[Select...Case...EndSelect | Select...Case...EndSelect]
Select
    Case <expression>
        statement1
        ...
    [Case 
        statement2
        ...]
    [Case Else
        statementN
        ...]
EndSelect
;
[Abs | Calculates the absolute value of a number.]
Abs ( |expression )
;
[ACos | Calculates the arcCosine of a number.]
ACos ( |expression )
;
[AdlibRegister | Registers an Adlib function.]
AdlibRegister ( |"function" [, time] )
;
[AdlibUnRegister | Unregisters an adlib function.]
AdlibUnRegister ( |["function"] )
;
[Asc | Returns the ASCII code of a character.]
Asc ( |"char" )
;
[AscW | Returns the unicode code of a character.]
AscW ( |"char" )
;
[ASin | Calculates the arcsine of a number.]
ASin ( |expression )
;
[Assign | Assigns a variable by name with the data.]
Assign ( |"varname", "data" [, flag] )
;
[ATan | Calculates the arctangent of a number.]
ATan ( |expression )
;
[AutoItSetOption | Changes the operation of various AutoIt functions/parameters.]
AutoItSetOption ( |"option" [, param] )
;
[AutoItWinGetTitle | Retrieves the title of the AutoIt window.]
AutoItWinGetTitle ( | )
;
[AutoItWinSetTitle | Changes the title of the AutoIt window.]
AutoItWinSetTitle ( |"newtitle" )
;
[Beep | Plays back a beep to the user.]
Beep ( |[Frequency [, Duration]] )
;
[Binary | Returns the binary representation of an expression.]
Binary ( |expression )
;
[BinaryLen | Returns the number of bytes in a binary variant.]
BinaryLen ( |binary )
;
[BinaryMid | Extracts a number of bytes from a binary variant.]
BinaryMid ( |binary, start [, count] )
;
[BinaryToString | Converts a binary variant into a string.]
BinaryToString ( |expression [, flag] )
;
[BitAND | Performs a bitwise AND operation.]
BitAND ( |value1, value2 [, value n] )
;
[BitNOT | Performs a bitwise NOT operation.]
BitNOT ( |value )
;
[BitOR | Performs a bitwise OR operation.]
BitOR ( |value1, value2 [, value n] )
;
[BitRotate | Performs a bit shifting operation, with rotation.]
BitRotate ( |value [, shift [, size]] )
;
[BitShift | Performs a bit shifting operation.]
BitShift ( |value, shift )
;
[BitXOR | Performs a bitwise exclusive OR (XOR) operation.]
BitXOR ( |value1, value2 [, value n] )
;
[BlockInput | Disable/enable the mouse and keyboard.]
BlockInput ( |flag )
;
[Break | Enables or disables the users' ability to exit a script from the tray icon menu.]
Break ( |mode )
;
[Call | Calls a user-defined function contained in a string parameter.]
Call ( |"function" [, param1 [, param2 [, param<i>N</i>]]] )
;
[CDTray | Opens or closes the CD tray.]
CDTray ( |"drive", "status" )
;
[Ceiling | Returns a number rounded up to the next integer.]
Ceiling ( |expression )
;
[Chr | Returns a character corresponding to an ASCII code.]
Chr ( |ASCIIcode )
;
[ChrW | Returns a character corresponding to a unicode code.]
ChrW ( |UNICODEcode )
;
[ClipGet | Retrieves text from the clipboard.]
ClipGet ( | )
;
[ClipPut | Writes text to the clipboard.]
ClipPut ( |"value" )
;
[ConsoleRead | Read from the STDIN stream of the AutoIt script process.]
ConsoleRead ( |[peek = false [, binary = false]] )
;
[ConsoleWrite | Writes data to the STDOUT stream. Some text editors can read this stream as can other programs which may be expecting data on this stream.]
ConsoleWrite ( |"data" )
;
[ConsoleWriteError | Writes data to the STDERR stream. Some text editors can read this stream as can other programs which may be expecting data on this stream.]
ConsoleWriteError ( |"data" )
;
[ControlClick | Sends a mouse click command to a given control.]
ControlClick ( |"title", "text", controlID [, button [, clicks [, x [, y]]]] )
;
[ControlCommand | Sends a command to a control.]
ControlCommand ( |"title", "text", controlID, "command" [, "option"] )
;
[ControlDisable | Disables or "grays-out" a control.]
ControlDisable ( |"title", "text", controlID )
;
[ControlEnable | Enables a "grayed-out" control.]
ControlEnable ( |"title", "text", controlID )
;
[ControlFocus | Sets input focus to a given control on a window.]
ControlFocus ( |"title", "text", controlID )
;
[ControlGetFocus | Returns the ControlRef# of the control that has keyboard focus within a specified window.]
ControlGetFocus ( |"title" [, "text"] )
;
[ControlGetHandle | Retrieves the internal handle of a control.]
ControlGetHandle ( |"title", "text", controlID )
;
[ControlGetPos | Retrieves the position and size of a control relative to its window.]
ControlGetPos ( |"title", "text", controlID )
;
[ControlGetText | Retrieves text from a control.]
ControlGetText ( |"title", "text", controlID )
;
[ControlHide | Hides a control.]
ControlHide ( |"title", "text", controlID )
;
[ControlListView | Sends a command to a ListView32 control.]
ControlListView ( |"title", "text", controlID, "command" [, option1 [, option2]] )
;
[ControlMove | Moves a control within a window.]
ControlMove ( |"title", "text", controlID, x, y [, width [, height]] )
;
[ControlSend | Sends a string of characters to a control.]
ControlSend ( |"title", "text", controlID, "string" [, flag] )
;
[ControlSetText | Sets text of a control.]
ControlSetText ( |"title", "text", controlID, "new text" [, flag] )
;
[ControlShow | Shows a control that was hidden.]
ControlShow ( |"title", "text", controlID )
;
[ControlTreeView | Sends a command to a TreeView32 control.]
ControlTreeView ( |"title", "text", controlID, "command" [, option1 [, option2]] )
;
[Cos | Calculates the cosine of a number.]
Cos ( |expression )
;
[Dec | Returns a numeric representation of a hexadecimal string.]
Dec ( |"hex" [, flag ] )
;
[DirCopy | Copies a directory and all sub-directories and files (Similar to xcopy).]
DirCopy ( |"source dir", "dest dir" [, flag] )
;
[DirCreate | Creates a directory/folder.]
DirCreate ( |"path" )
;
[DirGetSize | Returns the size in bytes of a given directory.]
DirGetSize ( |"path" [, flag] )
;
[DirMove | Moves a directory and all sub-directories and files.]
DirMove ( |"source dir", "dest dir" [, flag] )
;
[DirRemove | Deletes a directory/folder.]
DirRemove ( |"path" [, recurse] )
;
[DllCall | Dynamically calls a function in a DLL.]
DllCall ( |"dll", "return type", "function" [, type1, param1 [, type n, param n]] )
;
[DllCallAddress | Dynamically calls a function at a specific memory address.]
DllCallAddress ( |"return type", address [, type1, param1 [, type n, param n]] )
;
[DllCallbackFree | Frees a previously created handle created with DllCallbackRegister.]
DllCallbackFree ( |handle )
;
[DllCallbackGetPtr | Returns the pointer to a callback function that can be passed to the Win32 API.]
DllCallbackGetPtr ( |handle )
;
[DllCallbackRegister | Creates a user-defined DLL Callback function.]
DllCallbackRegister ( |"function", "return type", "params" )
;
[DllClose | Closes a previously opened DLL.]
DllClose ( |dllhandle )
;
[DllOpen | Opens a DLL file for use in DllCall.]
DllOpen ( |"filename" )
;
[DllStructCreate | Creates a C/C++ style structure to be used in DllCall.]
DllStructCreate ( |Struct [,Pointer] )
;
[DllStructGetData | Returns the data of an element of the struct.]
DllStructGetData ( |Struct, Element [, index] )
;
[DllStructGetPtr | Returns the pointer to the struct or an element in the struct.]
DllStructGetPtr ( |Struct [,Element] )
;
[DllStructGetSize | Returns the size of the struct in bytes.]
DllStructGetSize ( |Struct )
;
[DllStructSetData | Sets the data in of an element in the struct.]
DllStructSetData ( |Struct, Element, value [, index] )
;
[DriveGetDrive | Returns an array containing the enumerated drives.]
DriveGetDrive ( |"type" )
;
[DriveGetFileSystem | Returns File System Type of a drive.]
DriveGetFileSystem ( |"path" )
;
[DriveGetLabel | Returns Volume Label of a drive, if it has one.]
DriveGetLabel ( |"path" )
;
[DriveGetSerial | Returns Serial Number of a drive.]
DriveGetSerial ( |"path" )
;
[DriveGetType | Returns drive type.]
DriveGetType ( |"path" )
;
[DriveMapAdd | Maps a network drive.]
DriveMapAdd ( |"device", "remote share" [, flags [, "user" [, "password"]]] )
;
[DriveMapDel | Disconnects a network drive.]
DriveMapDel ( |"drive" )
;
[DriveMapGet | Retrieves the details of a mapped drive.]
DriveMapGet ( |"device" )
;
[DriveSetLabel | Sets the Volume Label of a drive.]
DriveSetLabel ( |"path", "label" )
;
[DriveSpaceFree | Returns the free disk space of a path in Megabytes.]
DriveSpaceFree ( |"path" )
;
[DriveSpaceTotal | Returns the total disk space of a path in Megabytes.]
DriveSpaceTotal ( |"path" )
;
[DriveStatus | Returns the status of the drive as a string.]
DriveStatus ( |"path" )
;
[EnvGet | Retrieves an environment variable.]
EnvGet ( |"envvariable" )
;
[EnvSet | Writes an environment variable.]
EnvSet ( |"envvariable" [, "value"] )
;
[EnvUpdate | Refreshes the OS environment.]
EnvUpdate ( | )
;
[Eval | Return the value of the variable defined by an string.]
Eval ( |string )
;
[Execute | Execute an expression.]
Execute ( |string )
;
[Exp | Calculates <i><b>e</b></i> to the power of a number.]
Exp ( |expression )
;
[FileChangeDir | Changes the current working directory.]
FileChangeDir ( |"path" )
;
[FileClose | Closes a previously opened text file.]
FileClose ( |"filehandle" )
;
[FileCopy | Copies one or more files.]
FileCopy ( |"source", "dest" [, flag] )
;
[FileCreateNTFSLink | Creates an NTFS hardlink to a file or a directory]
FileCreateNTFSLink ( |"source", "hardlink" [, flag] )
;
[FileCreateShortcut | Creates a shortcut (.lnk) to a file.]
FileCreateShortcut ( |"file", "lnk" [, "workdir" [, "args" [, "desc" [, "icon" [, "hotkey" [, icon number [, state]]]]]]] )
;
[FileDelete | Delete one or more files.]
FileDelete ( |"path" )
;
[FileExists | Checks if a file or directory exists.]
FileExists ( |"path" )
;
[FileFindFirstFile | Returns a search "handle" according to file search string.]
FileFindFirstFile ( |"filename" )
;
[FileFindNextFile | Returns a filename according to a previous call to FileFindFirstFile.]
FileFindNextFile ( |search )
;
[FileFlush | Flushes the file's buffer to disk.]
FileFlush ( |"filehandle" )
;
[FileGetAttrib | Returns a code string representing a file's attributes.]
FileGetAttrib ( |"filename" )
;
[FileGetEncoding | Determines the text encoding used in a file.]
FileGetEncoding ( |"filehandle/filename" [, mode] )
;
[FileGetLongName | Returns the long path+name of the path+name passed.]
FileGetLongName ( |"file" [, flag] )
;
[FileGetPos | Retrieves the current file position.]
FileGetPos ( |"filehandle" )
;
[FileGetShortcut | Retrieves details about a shortcut.]
FileGetShortcut ( |"lnk" )
;
[FileGetShortName | Returns the 8.3 short path+name of the path+name passed.]
FileGetShortName ( |"file" [, flag] )
;
[FileGetSize | Returns the size of a file in bytes.]
FileGetSize ( |"filename" )
;
[FileGetTime | Returns the time and date information for a file.]
FileGetTime ( |"filename" [, option [, format]] )
;
[FileGetVersion | Returns the "File" version information.]
FileGetVersion ( |"filename" [,"stringname"] )
;
[FileInstall | Include and install a file with the compiled script.]
FileInstall ( |"source", "dest" [, flag] )
;
[FileMove | Moves one or more files]
FileMove ( |"source", "dest" [, flag] )
;
[FileOpen | Opens a text file for reading or writing.]
FileOpen ( |"filename" [, mode] )
;
[FileOpenDialog | Initiates a Open File Dialog.]
FileOpenDialog ( |"title", "init dir", "filter" [, options [, "default name" [, hwnd]]] )
;
[FileRead | Read in a number of characters from a previously opened text file.]
FileRead ( |"filehandle/filename" [, count] )
;
[FileReadLine | Read in a line of text from a previously opened text file.]
FileReadLine ( |"filehandle/filename" [, line] )
;
[FileRecycle | Sends a file or directory to the recycle bin.]
FileRecycle ( |"source" )
;
[FileRecycleEmpty | Empties the recycle bin.]
FileRecycleEmpty ( |["source"] )
;
[FileSaveDialog | Initiates a Save File Dialog.]
FileSaveDialog ( |"title", "init dir", "filter" [, options [, "default name" [, hwnd]]] )
;
[FileSelectFolder | Initiates a Browse For Folder dialog.]
FileSelectFolder ( |"dialog text", "root dir" [, flag [, "initial dir" [, hwnd]]] )
;
[FileSetAttrib | Sets the attributes of one or more files.]
FileSetAttrib ( |"file pattern", "+-RASHNOT" [, recurse] )
;
[FileSetPos | Sets the current file position.]
FileSetPos ( |"filehandle", offset, origin )
;
[FileSetTime | Sets the timestamp of one of more files.]
FileSetTime ( |"file pattern", "time" [, type [, recurse]] )
;
[FileWrite | Append a text/data to the end of a previously opened file.]
FileWrite ( |"filehandle/filename", "text/data" )
;
[FileWriteLine | Append a line of text to the end of a previously opened text file.]
FileWriteLine ( |"filehandle/filename", "line" )
;
[Floor | Returns a number rounded down to the closest integer.]
Floor ( |expression )
;
[FtpSetProxy | Sets the internet proxy to use for ftp access.]
FtpSetProxy ( |mode [, "proxy:port" [, "username" [, "password"]]] )
;
[GUICreate | Create a GUI window.]
GUICreate ( |"title" [, width [, height [, left [, top [, style [, exStyle [, parent]]]]]]] )
;
[GUICtrlCreateAvi | Creates an AVI video control for the GUI.]
GUICtrlCreateAvi ( |filename, subfileid, left, top [, width [, height [, style [, exStyle]]]] )
;
[GUICtrlCreateButton | Creates a Button control for the GUI.]
GUICtrlCreateButton ( |"text", left, top [, width [, height [, style [, exStyle]]]] )
;
[GUICtrlCreateCheckbox | Creates a Checkbox control for the GUI.]
GUICtrlCreateCheckbox ( |"text", left, top [, width [, height [, style [, exStyle]]]] )
;
[GUICtrlCreateCombo | Creates a ComboBox control for the GUI.]
GUICtrlCreateCombo ( |"text", left, top [, width [, height [, style [, exStyle]]]] )
;
[GUICtrlCreateContextMenu | Creates a context menu for a control or entire GUI window.]
GUICtrlCreateContextMenu ( |[controlID] )
;
[GUICtrlCreateDate | Creates a date control for the GUI.]
GUICtrlCreateDate ( |"text", left, top [, width [, height [, style [, exStyle]]]] )
;
[GUICtrlCreateDummy | Creates a Dummy control for the GUI.]
GUICtrlCreateDummy ( | )
;
[GUICtrlCreateEdit | Creates an Edit control for the GUI.]
GUICtrlCreateEdit ( |"text", left, top [, width [, height [, style [, exStyle]]]] )
;
[GUICtrlCreateGraphic | Creates a Graphic control for the GUI.]
GUICtrlCreateGraphic ( |left, top [, width [, height [, style]]] )
;
[GUICtrlCreateGroup | Creates a Group control for the GUI.]
GUICtrlCreateGroup ( |"text", left, top [, width [, height [, style [, exStyle]]]] )
;
[GUICtrlCreateIcon | Creates an Icon control for the GUI.]
GUICtrlCreateIcon ( |filename, iconName, left, top [, width [, height [, style [, exStyle]]]] )
;
[GUICtrlCreateInput | Creates an Input control for the GUI.]
GUICtrlCreateInput ( |"text", left, top [, width [, height [, style [, exStyle]]]] )
;
[GUICtrlCreateLabel | Creates a static Label control for the GUI.]
GUICtrlCreateLabel ( |"text", left, top [, width [, height [, style [, exStyle]]]] )
;
[GUICtrlCreateList | Creates a List control for the GUI.]
GUICtrlCreateList ( |"text", left, top [, width [, height [, style [, exStyle]]]] )
;
[GUICtrlCreateListView | Creates a ListView control for the GUI.]
GUICtrlCreateListView ( |"text", left, top [, width [, height [, style [, exStyle]]]] )
;
[GUICtrlCreateListViewItem | Creates a ListView item.]
GUICtrlCreateListViewItem ( |"text", listviewID )
;
[GUICtrlCreateMenu | Creates a Menu control for the GUI.]
GUICtrlCreateMenu ( |"submenutext" [, menuID [, menuentry]] )
;
[GUICtrlCreateMenuItem | Creates a MenuItem control for the GUI.]
GUICtrlCreateMenuItem ( |"text", menuID [, menuentry [, menuradioitem]] )
;
[GUICtrlCreateMonthCal | Creates a month calendar control for the GUI.]
GUICtrlCreateMonthCal ( |"text", left, top [, width [, height [, style [, exStyle]]]] )
;
[GUICtrlCreateObj | Creates an ActiveX control in the GUI.]
GUICtrlCreateObj ( |ObjectVar, left, top [, width [, height]] )
;
[GUICtrlCreatePic | Creates a Picture control for the GUI.]
GUICtrlCreatePic ( |filename, left, top [, width [, height [, style [, exStyle]]]] )
;
[GUICtrlCreateProgress | Creates a Progress control for the GUI.]
GUICtrlCreateProgress ( |left, top [, width [, height [, style [, exStyle]]]] )
;
[GUICtrlCreateRadio | Creates a Radio button control for the GUI.]
GUICtrlCreateRadio ( |"text", left, top [, width [, height [, style [, exStyle]]]] )
;
[GUICtrlCreateSlider | Creates a Slider control for the GUI.]
GUICtrlCreateSlider ( |left, top [, width [, height [, style [, exStyle]]]] )
;
[GUICtrlCreateTab | Creates a Tab control for the GUI.]
GUICtrlCreateTab ( |left, top [, width [, height [, style [, exStyle]]]] )
;
[GUICtrlCreateTabItem | Creates a TabItem control for the GUI.]
GUICtrlCreateTabItem ( |"text" )
;
[GUICtrlCreateTreeView | Creates a TreeView control for the GUI.]
GUICtrlCreateTreeView ( |left, top [, width [, height [, style [, exStyle]]]] )
;
[GUICtrlCreateTreeViewItem | Creates a TreeViewItem control for the GUI.]
GUICtrlCreateTreeViewItem ( |"text", treeviewID )
;
[GUICtrlCreateUpdown | Creates an UpDown control for the GUI.]
GUICtrlCreateUpdown ( |inputcontrolID [,style] )
;
[GUICtrlDelete | Deletes a control.]
GUICtrlDelete ( |controlID )
;
[GUICtrlGetHandle | Returns the handle for a control and some special (item) handles (Menu, ContextMenu, TreeViewItem).]
GUICtrlGetHandle ( |controlID )
;
[GUICtrlGetState | Gets the current state of a control]
GUICtrlGetState ( |[controlID] )
;
[GUICtrlRead | Read state or data of a control.]
GUICtrlRead ( |controlID [, advanced] )
;
[GUICtrlRecvMsg | Send a message to a control and retrieve information in lParam.]
GUICtrlRecvMsg ( |controlID , msg [, wParam [, lParamType]] )
;
[GUICtrlRegisterListViewSort | Register a user defined function for an internal listview sorting callback function.]
GUICtrlRegisterListViewSort ( |controlID, "function" )
;
[GUICtrlSendMsg | Send a message to a control.]
GUICtrlSendMsg ( |controlID, msg , wParam, lParam )
;
[GUICtrlSendToDummy | Sends a message to a Dummy control.]
GUICtrlSendToDummy ( |controlID [, state] )
;
[GUICtrlSetBkColor | Sets the background color of a control.]
GUICtrlSetBkColor ( |controlID, backgroundcolor )
;
[GUICtrlSetColor | Sets the text color of a control.]
GUICtrlSetColor ( |controlID, textcolor )
;
[GUICtrlSetCursor | Sets the mouse cursor icon for a particular control.]
GUICtrlSetCursor ( |controlID, cursorID )
;
[GUICtrlSetData | Modifies the data for a control.]
GUICtrlSetData ( |controlID, data [, default] )
;
[GUICtrlSetDefBkColor | Sets the default background color of all the controls of the GUI window.]
GUICtrlSetDefBkColor ( |defbkcolor [, winhandle] )
;
[GUICtrlSetDefColor | Sets the default text color of all the controls of the GUI window.]
GUICtrlSetDefColor ( |deftextcolor [, winhandle] )
;
[GUICtrlSetFont | Sets the font for a control.]
GUICtrlSetFont ( |controlID, size [, weight [, attribute [, fontname [, quality]]]] )
;
[GUICtrlSetGraphic | Modifies the data for a control.]
GUICtrlSetGraphic ( |controlID, type [, par1 [, ... par6]] )
;
[GUICtrlSetImage | Sets the bitmap or icon image to use for a control.]
GUICtrlSetImage ( |controlID, filename [, iconname [, icontype]] )
;
[GUICtrlSetLimit | Limits the number of characters/pixels for a control.]
GUICtrlSetLimit ( |controlID, max [, min] )
;
[GUICtrlSetOnEvent | Defines a user-defined function to be called when a control is clicked.]
GUICtrlSetOnEvent ( |controlID, "function" )
;
[GUICtrlSetPos | Changes the position of a control within the GUI window.]
GUICtrlSetPos ( |controlID, left [, top [, width [, height]]] )
;
[GUICtrlSetResizing | Defines the resizing method used by a control.]
GUICtrlSetResizing ( |controlID, resizing )
;
[GUICtrlSetState | Changes the state of a control.]
GUICtrlSetState ( |controlID, state )
;
[GUICtrlSetStyle | Changes the style of a control.]
GUICtrlSetStyle ( |controlID, style [, exStyle] )
;
[GUICtrlSetTip | Sets the tip text associated with a control.]
GUICtrlSetTip ( |controlID, tiptext [, "title" [, icon [, options]]] )
;
[GUIDelete | Deletes a GUI window and all controls that it contains.]
GUIDelete ( |[winhandle] )
;
[GUIGetCursorInfo | Gets the mouse cursor position relative to GUI window.]
GUIGetCursorInfo ( |[winhandle] )
;
[GUIGetMsg | Polls the GUI to see if any events have occurred.]
GUIGetMsg ( |[advanced] )
;
[GUIGetStyle | Retrieves the styles of a GUI window.]
GUIGetStyle ( |[winhandle] )
;
[GUIRegisterMsg | Register a user defined function for a known Windows Message ID (WM_MSG).]
GUIRegisterMsg ( |msgID, "function" )
;
[GUISetAccelerators | Sets the accelerator table to be used in a GUI window.]
GUISetAccelerators ( |accelerators [, winhandle] )
;
[GUISetBkColor | Sets the background color of the GUI window.]
GUISetBkColor ( |background [, winhandle] )
;
[GUISetCoord | Sets absolute coordinates for the next control.]
GUISetCoord ( |left, top [, width [, height [, winhandle]]] )
;
[GUISetCursor | Sets the mouse cursor icon for a GUI window.]
GUISetCursor ( |[cursorID [, override [, winhandle]]] )
;
[GUISetFont | Sets the default font for a GUI window.]
GUISetFont ( |size [, weight [, attribute [, fontname [, winhandle [, quality]]]]] )
;
[GUISetHelp | Sets an executable file that will be run when F1 is pressed.]
GUISetHelp ( |helpfile [, winhandle] )
;
[GUISetIcon | Sets the icon used in a GUI window.]
GUISetIcon ( |iconfile [, iconID [, winhandle]] )
;
[GUISetOnEvent | Defines a user function to be called when a system button is clicked.]
GUISetOnEvent ( |specialID, "function" [, winhandle] )
;
[GUISetState | Changes the state of a GUI window.]
GUISetState ( |[flag [, winhandle]] )
;
[GUISetStyle | Changes the styles of a GUI window.]
GUISetStyle ( |Style [,ExStyle [, winhandle]] )
;
[GUIStartGroup | Defines that any subsequent controls that are created will be "grouped" together.]
GUIStartGroup ( |[winhandle] )
;
[GUISwitch | Switches the current window used for GUI functions.]
GUISwitch ( |winhandle [, tabitemID] )
;
[Hex | Returns a string representation of an integer or of a binary type converted to hexadecimal.]
Hex ( |expression [, length] )
;
[HotKeySet | Sets a hotkey that calls a user function.]
HotKeySet ( |"key" [, "function"] )
;
[HttpSetProxy | Sets the internet proxy to use for http access.]
HttpSetProxy ( |mode [, "proxy:port" [, "username" [, "password"]]] )
;
[HttpSetUserAgent | Sets the user-agent string sent with InetGet() and InetRead() requests.]
HttpSetUserAgent ( |"user agent" )
;
[HWnd | Converts an expression into an HWND handle.]
HWnd ( |expression )
;
[InetClose | Closes a handle returned from InetGet().]
InetClose ( |handle )
;
[InetGet | Downloads a file from the internet using the HTTP, HTTPS or FTP protocol.]
InetGet ( |"URL" [,"filename" [, options [, background]]] )
;
[InetGetInfo | Returns detailed data for a handle returned from InetGet().]
InetGetInfo ( |[handle [, index]] )
;
[InetGetSize | Returns the size (in bytes) of a file located on the internet.]
InetGetSize ( |"URL" [, options] )
;
[InetRead | Downloads a file from the internet using the HTTP, HTTPS or FTP protocol.]
InetRead ( |"URL" [, options] )
;
[IniDelete | Deletes a value from a standard format .ini file.]
IniDelete ( |"filename", "section" [, "key"] )
;
[IniRead | Reads a value from a standard format .ini file.]
IniRead ( |"filename", "section", "key", "default" )
;
[IniReadSection | Reads all key/value pairs from a section in a standard format .ini file.]
IniReadSection ( |"filename", "section" )
;
[IniReadSectionNames | Reads all sections in a standard format .ini file.]
IniReadSectionNames ( |"filename" )
;
[IniRenameSection | Renames a section in a standard format .ini file.]
IniRenameSection ( |"filename", "section", "new section" [, flag] )
;
[IniWrite | Writes a value to a standard format .ini file.]
IniWrite ( |"filename", "section", "key", "value" )
;
[IniWriteSection | Writes a section to a standard format .ini file.]
IniWriteSection ( |"filename", "section", "data" [, index] )
;
[InputBox | Displays an input box to ask the user to enter a string.]
InputBox ( |"title", "prompt" [, "default" [, "password char" [, width [, height [, left [, top [, timeout [, hwnd]]]]]]]] )
;
[Int | Returns the integer (whole number) representation of an expression.]
Int ( |expression [, flag ] )
;
[IsAdmin | Checks if the current user has full administrator privileges.]
IsAdmin ( | )
;
[IsArray | Checks if a variable is an array type.]
IsArray ( |variable )
;
[IsBinary | Checks if a variable or expression is a binary type.]
IsBinary ( |expression )
;
[IsBool | Checks if a variable's base type is boolean.]
IsBool ( |variable )
;
[IsDeclared | Check if a variable has been declared.]
IsDeclared ( |expression )
;
[IsDllStruct | Checks if a variable is a DllStruct type.]
IsDllStruct ( |variable )
;
[IsFloat | Checks if a variable or expression is a float-type.]
IsFloat ( |variable )
;
[IsHWnd | Checks if a variable's base type is a pointer and window handle.]
IsHWnd ( |variable )
;
[IsInt | Checks if a variable or expression is an integer type.]
IsInt ( |variable )
;
[IsKeyword | Checks if a variable is a keyword (for example, Default).]
IsKeyword ( |variable )
;
[IsNumber | Checks if a variable's base type is numeric.]
IsNumber ( |variable )
;
[IsObj | Checks if a variable or expression is an object type.]
IsObj ( |variable )
;
[IsPtr | Checks if a variable's base type is a pointer.]
IsPtr ( |variable )
;
[IsString | Checks if a variable is a string type.]
IsString ( |variable )
;
[Log | Calculates the natural logarithm of a number.]
Log ( |expression )
;
[MemGetStats | Retrieves memory related information.]
MemGetStats ( | )
;
[Mod | Performs the modulus operation.]
Mod ( |value1, value2 )
;
[MouseClick | Perform a mouse click operation.]
MouseClick ( |"button" [, x, y [, clicks [, speed]]] )
;
[MouseClickDrag | Perform a mouse click and drag operation.]
MouseClickDrag ( |"button", x1, y1, x2, y2 [, speed] )
;
[MouseDown | Perform a mouse down event at the current mouse position.]
MouseDown ( |"button" )
;
[MouseGetCursor | Returns the cursor ID Number for the current Mouse Cursor.]
MouseGetCursor ( | )
;
[MouseGetPos | Retrieves the current position of the mouse cursor.]
MouseGetPos ( |[dimension] )
;
[MouseMove | Moves the mouse pointer.]
MouseMove ( |x, y [, speed] )
;
[MouseUp | Perform a mouse up event at the current mouse position.]
MouseUp ( |"button" )
;
[MouseWheel | Moves the mouse wheel up or down.  NT/2000/XP ONLY.]
MouseWheel ( |"direction" [, clicks] )
;
[MsgBox | Displays a simple message box with optional timeout.]
MsgBox ( |flag, "title", "text" [, timeout [, hwnd]] )
;
[Number | Returns the numeric representation of an expression.]
Number ( |expression [, flag ] )
;
[ObjCreate | Creates a reference to a COM object from the given classname.]
ObjCreate ( |"classname" [, "servername" [,"username", ["password"]]] )
;
[ObjCreateInterface | Creates a reference to an object from the given classname/object pointer, interface identifier and description string.]
ObjCreateInterface ( |"CLSID" , "IID" [,"interface_description", ["flag"]] )
;
[ObjEvent | Handles incoming events from the given Object.]
ObjEvent ( |$ObjectVar, "functionprefix" [, "interface name"] )
;
[ObjGet | Retrieves a reference to a COM object from an existing process or filename.]
ObjGet ( |"filename" [, "classname"] )
;
[ObjName | Returns the name or interface description of an Object]
ObjName ( |$Objectvariable [,Flag] )
;
[OnAutoItExitRegister | Registers a function to be called when AutoIt exits.]
OnAutoItExitRegister ( |"function" )
;
[OnAutoItExitUnRegister | UnRegisters a function that was called when AutoIt exits.]
OnAutoItExitUnRegister ( |"function" )
;
[Ping | Pings a host and returns the roundtrip-time.]
Ping ( |"address/hostname" [, timeout] )
;
[PixelChecksum | Generates a checksum for a region of pixels.]
PixelChecksum ( |left, top, right, bottom [, step [, hwnd [, mode]]] )
;
[PixelGetColor | Returns a pixel color according to x,y pixel coordinates.]
PixelGetColor ( |x , y [, hwnd] )
;
[PixelSearch | Searches a rectangle of pixels for the pixel color provided.]
PixelSearch ( |left, top, right, bottom, color [, shade-variation [, step [, hwnd]]] )
;
[PluginClose | Close a plugin file]
PluginClose ( |dllhandle )
;
[PluginOpen | Open a plugin file.]
PluginOpen ( |filename )
;
[ProcessClose | Terminates a named process.]
ProcessClose ( |"process" )
;
[ProcessExists | Checks to see if a specified process exists.]
ProcessExists ( |"process" )
;
[ProcessGetStats | Returns an array about Memory or IO infos of a running process.]
ProcessGetStats ( |["process" [, type]] )
;
[ProcessList | Returns an array listing the currently running processes (names and PIDs).]
ProcessList ( |["name"] )
;
[ProcessSetPriority | Changes the priority of a process]
ProcessSetPriority ( |"process", priority )
;
[ProcessWait | Pauses script execution until a given process exists.]
ProcessWait ( |"process" [, timeout] )
;
[ProcessWaitClose | Pauses script execution until a given process does not exist.]
ProcessWaitClose ( |"process" [, timeout] )
;
[ProgressOff | Turns Progress window off.]
ProgressOff ( | )
;
[ProgressOn | Creates a customizable progress bar window.]
ProgressOn ( |"title", "maintext" [, "subtext" [, x pos [, y pos [, opt]]]] )
;
[ProgressSet | Sets the position and/or text of a previously created Progress bar window.]
ProgressSet ( |percent [, "subtext" [, "maintext"]] )
;
[Ptr | Converts an expression into a pointer variant.]
Ptr ( |expression )
;
[Random | Generates a pseudo-random float-type number.]
Random ( |[Min [, Max [, Flag]]] )
;
[RegDelete | Deletes a key or value from the registry.]
RegDelete ( |"keyname" [, "valuename"] )
;
[RegEnumKey | Reads the name of a subkey according to its instance.]
RegEnumKey ( |"keyname", instance )
;
[RegEnumVal | Reads the name of a value according to its instance.]
RegEnumVal ( |"keyname", instance )
;
[RegRead | Reads a value from the registry.]
RegRead ( |"keyname", "valuename" )
;
[RegWrite | Creates a key or value in the registry.]
RegWrite ( |"keyname" [,"valuename" [, "type" [, value]]] )
;
[Round | Returns a number rounded to a specified number of decimal places.]
Round ( |expression [, decimalplaces] )
;
[Run | Runs an external program.]
Run ( |"program" [, "workingdir" [, show_flag [, opt_flag]]] )
;
[RunAs | Runs an external program under the context of a different user.]
RunAs ( |"username", "domain", "password", logon_flag, "program" [, "workingdir" [, show_flag [, opt_flag]]] )
;
[RunAsWait | Runs an external program under the context of a different user and pauses script execution until the program finishes.]
RunAsWait ( |"username", "domain", "password", logon_flag, "program" [, "workingdir" [, show_flag [, opt_flag]]] )
;
[RunWait | Runs an external program and pauses script execution until the program finishes.]
RunWait ( |"program" [, "workingdir" [, show_flag [, opt_flag]]] )
;
[Send | Sends simulated keystrokes to the active window.]
Send ( |"keys" [, flag] )
;
[SendKeepActive | Attempts to keep a specified window active during Send().]
SendKeepActive ( |"title" [, "text"] )
;
[SetError | Manually set the value of the @error macro.]
SetError ( |code [, extended [, return value]] )
;
[SetExtended | Manually set the value of the @extended macro.]
SetExtended ( |code [, return value] )
;
[ShellExecute | Runs an external program using the ShellExecute API.]
ShellExecute ( |"filename" [, "parameters" [, "workingdir" [, "verb" [, showflag]]]] )
;
[ShellExecuteWait | Runs an external program using the ShellExecute API and pauses script execution until it finishes.]
ShellExecuteWait ( |"filename" [, "parameters" [, "workingdir" [, "verb" [, showflag]]]] )
;
[Shutdown | Shuts down the system.]
Shutdown ( |code [, reason] )
;
[Sin | Calculates the sine of a number.]
Sin ( |expression )
;
[Sleep | Pause script execution.]
Sleep ( |delay )
;
[SoundPlay | Play a sound file.]
SoundPlay ( |"filename" [, wait] )
;
[SoundSetWaveVolume | Sets the system wave volume by percent.]
SoundSetWaveVolume ( |percent )
;
[SplashImageOn | Creates a customizable image popup window.]
SplashImageOn ( |"title", "file" [, width [, height [, x pos [, y pos [, opt]]]]] )
;
[SplashOff | Turns SplashText or SplashImage off.]
SplashOff ( | )
;
[SplashTextOn | Creates a customizable text popup window.]
SplashTextOn ( |"title", "text" [, w [, h [, x pos [, y pos [, opt [, "fontname" [, fontsz [, fontwt]]]]]]]] )
;
[Sqrt | Calculates the square-root of a number.]
Sqrt ( |expression )
;
[SRandom | Set Seed for random number generation.]
SRandom ( |Seed )
;
[StatusbarGetText | Retrieves the text from a standard status bar control.]
StatusbarGetText ( |"title" [, "text" [, part]] )
;
[StderrRead | Reads from the STDERR stream of a previously run child process.]
StderrRead ( |process_id [, peek = false [, binary = false]] )
;
[StdinWrite | Writes a number of characters to the STDIN stream of a previously run child process.]
StdinWrite ( |process_id [, data] )
;
[StdioClose | Closes all resources associated with a process previously run with STDIO redirection.]
StdioClose ( |process_id )
;
[StdoutRead | Reads from the STDOUT stream of a previously run child process.]
StdoutRead ( |process_id [, peek = false [, binary = false]] )
;
[String | Returns the string representation of an expression.]
String ( |expression )
;
[StringAddCR | Takes a string and prefixes all linefeed characters ( Chr(10) ) with a carriage return character ( Chr(13) ).]
StringAddCR ( |"string" )
;
[StringCompare | Compares two strings with options.]
StringCompare ( |"string1", "string2" [, casesense] )
;
[StringFormat | Returns a formatted string (similar to the C sprintf() function).]
StringFormat ( |"format control", var1 [, ... var32] )
;
[StringFromASCIIArray | Converts an array of ASCII codes to a string.]
StringFromASCIIArray ( |array, [start [, end [, encoding]]] )
;
[StringInStr | Checks if a string contains a given substring.]
StringInStr ( |"string", "substring" [, casesense [, occurrence [, start [, count]]]] )
;
[StringIsAlNum | Checks if a string contains only alphanumeric characters.]
StringIsAlNum ( |"string" )
;
[StringIsAlpha | Checks if a string contains only alphabetic characters.]
StringIsAlpha ( |"string" )
;
[StringIsASCII | Checks if a string contains only ASCII characters in the range 0x00 - 0x7f (0 - 127).]
StringIsASCII ( |"string" )
;
[StringIsDigit | Checks if a string contains only digit (0-9) characters.]
StringIsDigit ( |"string" )
;
[StringIsFloat | Checks if a string is a floating point number.]
StringIsFloat ( |"string" )
;
[StringIsInt | Checks if a string is an integer.]
StringIsInt ( |"string" )
;
[StringIsLower | Checks if a string contains only lowercase characters.]
StringIsLower ( |"string" )
;
[StringIsSpace | Checks if a string contains only whitespace characters.]
StringIsSpace ( |"string" )
;
[StringIsUpper | Checks if a string contains only uppercase characters.]
StringIsUpper ( |"string" )
;
[StringIsXDigit | Checks if a string contains only hexadecimal digit (0-9, A-F) characters.]
StringIsXDigit ( |"string" )
;
[StringLeft | Returns a number of characters from the left-hand side of a string.]
StringLeft ( |"string", count )
;
[StringLen | Returns the number of characters in a string.]
StringLen ( |"string" )
;
[StringLower | Converts a string to lowercase.]
StringLower ( |"string" )
;
[StringMid | Extracts a number of characters from a string.]
StringMid ( |"string", start [, count] )
;
[StringRegExp | Check if a string fits a given regular expression pattern.]
StringRegExp ( |"test", "pattern" [, flag [, offset]] )
;
[StringRegExpReplace | Replace text in a string based on regular expressions.]
StringRegExpReplace ( |"test", "pattern", "replace", [count] )
;
[StringReplace | Replaces substrings in a string.]
StringReplace ( |"string", "searchstring/start", "replacestring" [, occurrence [, casesense]] )
;
[StringRight | Returns a number of characters from the right-hand side of a string.]
StringRight ( |"string", count )
;
[StringSplit | Splits up a string into substrings depending on the given delimiters.]
StringSplit ( |"string", "delimiters" [, flag] )
;
[StringStripCR | Removes all carriage return values ( Chr(13) ) from a string.]
StringStripCR ( |"string" )
;
[StringStripWS | Strips the white space in a string.]
StringStripWS ( |"string", flag )
;
[StringToASCIIArray | Converts a string to an array containing the ASCII code of each character.]
StringToASCIIArray ( |"string", [start [, end [, encoding]]] )
;
[StringToBinary | Converts a string into binary data.]
StringToBinary ( |expression [, flag] )
;
[StringTrimLeft | Trims a number of characters from the left hand side of a string.]
StringTrimLeft ( |"string", count )
;
[StringTrimRight | Trims a number of characters from the right hand side of a string.]
StringTrimRight ( |"string", count )
;
[StringUpper | Converts a string to uppercase.]
StringUpper ( |"string" )
;
[Tan | Calculates the tangent of a number.]
Tan ( |expression )
;
[TCPAccept | Permits an incoming connection attempt on a socket.]
TCPAccept ( |mainsocket )
;
[TCPCloseSocket | Closes a TCP socket.]
TCPCloseSocket ( |socket )
;
[TCPConnect | Create a socket connected to an existing server.]
TCPConnect ( |IPAddr, port )
;
[TCPListen | Creates a socket listening for an incoming connection.]
TCPListen ( |IPAddr, port [, MaxPendingConnection] )
;
[TCPNameToIP | Converts an Internet name to IP address.]
TCPNameToIP ( |name )
;
[TCPRecv | Receives data from a connected socket.]
TCPRecv ( |mainsocket, maxlen [, flag] )
;
[TCPSend | Sends data on a connected socket.]
TCPSend ( |mainsocket, data )
;
[TCPShutdown | Stops TCP/UDP services.]
TCPShutdown ( |)
;
[TCPStartup | Starts TCP or UDP services.]
TCPStartup ( |)
;
[TimerDiff | Returns the difference in time from a previous call to TimerInit().]
TimerDiff ( |handle )
;
[TimerInit | Returns a handle that can be passed to TimerDiff() to calculate the difference in milliseconds.]
TimerInit ( | )
;
[ToolTip | Creates a tooltip anywhere on the screen.]
ToolTip ( |"text" [, x [, y [, "title" [, icon [, options]]]]] )
;
[TrayCreateItem | Creates a menuitem control for the tray.]
TrayCreateItem ( |text [, menuID [, menuentry [, menuradioitem]]] )
;
[TrayCreateMenu | Creates a menu control for the tray menu.]
TrayCreateMenu ( |"sub/menutext" [, menuID [, menuentry]] )
;
[TrayGetMsg | Polls the tray to see if any events have occurred.]
TrayGetMsg ( | )
;
[TrayItemDelete | Deletes a menu/item control from the tray menu.]
TrayItemDelete ( |controlID )
;
[TrayItemGetHandle | Returns the handle for a tray menu(item).]
TrayItemGetHandle ( |controlID )
;
[TrayItemGetState | Gets the current state of a control.]
TrayItemGetState ( |[controlID] )
;
[TrayItemGetText | Gets the itemtext of a tray menu/item control.]
TrayItemGetText ( |controlID )
;
[TrayItemSetOnEvent | Defines a user-defined function to be called when a tray item is clicked.]
TrayItemSetOnEvent ( |itemID, "function" )
;
[TrayItemSetState | Sets the state of a tray menu/item control.]
TrayItemSetState ( |controlID, state )
;
[TrayItemSetText | Sets the itemtext of a tray menu/item control.]
TrayItemSetText ( |controlID, text )
;
[TraySetClick | Sets the clickmode of the tray icon - what mouseclicks will display the tray menu.]
TraySetClick ( |flag )
;
[TraySetIcon | Loads/Sets a specified tray icon.]
TraySetIcon ( |[filename [, iconID]] )
;
[TraySetOnEvent | Defines a user function to be called when a special tray action happens.]
TraySetOnEvent ( |specialID, "function" )
;
[TraySetPauseIcon | Loads/Sets a specified tray pause icon.]
TraySetPauseIcon ( |[filename [, iconID]] )
;
[TraySetState | Sets the state of the tray icon.]
TraySetState ( |[flag] )
;
[TraySetToolTip | (Re)Sets the tooltip text for the tray icon.]
TraySetToolTip ( |[text] )
;
[TrayTip | Displays a balloon tip from the AutoIt Icon.]
TrayTip ( |"title", "text", timeout [, option] )
;
[UBound | Returns the size of array dimensions.]
UBound ( |Array [, Dimension] )
;
[UDPBind | Create a socket bound to an incoming connection.]
UDPBind ( |IPAddr, port )
;
[UDPCloseSocket | Close a UDP socket.]
UDPCloseSocket ( |socketarray )
;
[UDPOpen | Open a socket connected to an existing server .]
UDPOpen ( |IPAddr, port [, flag] )
;
[UDPRecv | Receives data from an opened socket]
UDPRecv ( |socketarray, maxlen [, flag] )
;
[UDPSend | Sends data on an opened socket]
UDPSend ( |socketarray, data )
;
[VarGetType | Returns the internal type representation of a variant.]
VarGetType ( |expression )
;
[WinActivate | Activates (gives focus to) a window.]
WinActivate ( |"title" [, "text"] )
;
[WinActive | Checks to see if a specified window exists and is currently active.]
WinActive ( |"title" [, "text"] )
;
[WinClose | Closes a window.]
WinClose ( |"title" [, "text"] )
;
[WinExists | Checks to see if a specified window exists.]
WinExists ( |"title" [, "text"] )
;
[WinFlash | Flashes a window in the taskbar.]
WinFlash ( |"title" [,"text" [,flashes [,delay]]] )
;
[WinGetCaretPos | Returns the coordinates of the caret in the foreground window]
WinGetCaretPos ( | )
;
[WinGetClassList | Retrieves the classes from a window.]
WinGetClassList ( |"title" [, "text"] )
;
[WinGetClientSize | Retrieves the size of a given window's client area.]
WinGetClientSize ( |"title" [, "text"] )
;
[WinGetHandle | Retrieves the internal handle of a window.]
WinGetHandle ( |"title" [, "text"] )
;
[WinGetPos | Retrieves the position and size of a given window.]
WinGetPos ( |"title" [, "text"] )
;
[WinGetProcess | Retrieves the Process ID (PID) associated with a window.]
WinGetProcess ( |"title" [, "text"] )
;
[WinGetState | Retrieves the state of a given window.]
WinGetState ( |"title" [, "text"] )
;
[WinGetText | Retrieves the text from a window.]
WinGetText ( |"title" [, "text"] )
;
[WinGetTitle | Retrieves the full title from a window.]
WinGetTitle ( |"title" [, "text"] )
;
[WinKill | Forces a window to close.]
WinKill ( |"title" [, "text"] )
;
[WinList | Retrieves a list of windows.]
WinList ( |["title" [, "text"]] )
;
[WinMenuSelectItem | Invokes a menu item of a window.]
WinMenuSelectItem ( |"title", "text", "item" [, "item" [, "item" [, "item" [, "item" [, "item" [, "item"]]]]]] )
;
[WinMinimizeAll | Minimizes all windows.]
WinMinimizeAll ( | )
;
[WinMinimizeAllUndo | Undoes a previous WinMinimizeAll function.]
WinMinimizeAllUndo ( | )
;
[WinMove | Moves and/or resizes a window.]
WinMove ( |"title", "text", x, y [, width [, height [, speed]]] )
;
[WinSetOnTop | Change a window's  "Always On Top" attribute.]
WinSetOnTop ( |"title", "text", flag )
;
[WinSetState | Shows, hides, minimizes, maximizes, or restores a window.]
WinSetState ( |"title", "text", flag )
;
[WinSetTitle | Changes the title of a window.]
WinSetTitle ( |"title", "text", "newtitle" )
;
[WinSetTrans | Sets the transparency of a window. (Windows 2000/XP or later)]
WinSetTrans ( |"title", "text", transparency )
;
[WinWait | Pauses execution of the script until the requested window exists.]
WinWait ( |"title" [, "text" [, timeout]] )
;
[WinWaitActive | Pauses execution of the script until the requested window is active.]
WinWaitActive ( |"title" [, "text" [, timeout]] )
;
[WinWaitClose | Pauses execution of the script until the requested window does not exist.]
WinWaitClose ( |"title" [, "text" [, timeout]] )
;
[WinWaitNotActive | Pauses execution of the script until the requested window is not active.]
WinWaitNotActive ( |"title" [, "text" [, timeout]] )
;
[@AppDataCommonDir |   Path to Application Data]
@AppDataCommonDir
;
[@AppDataDir |   Path to current user's Application Data]
@AppDataDir
;
[@AutoItExe |   The full path and filename of the AutoIt executable currently running.  For compiled scripts it is the path of the compiled script.]
@AutoItExe
;
[@AutoItPID |   PID of the process running the script.]
@AutoItPID
;
[@AutoItVersion |   Version number of AutoIt such as 3.3.6.1]
@AutoItVersion
;
[@AutoItX64 |   Returns 1 if the script is running under the native x64 version of AutoIt.]
@AutoItX64
;
[@COM_EventObj |   Object the COM event is being fired on. Only valid in a COM event function.]
@COM_EventObj
;
[@CommonFilesDir |   Path to Common Files folder]
@CommonFilesDir
;
[@Compiled |   Returns 1 if script is a compiled executable; otherwise, returns 0.]
@Compiled
;
[@ComputerName |   Computer's network name.]
@ComputerName
;
[@ComSpec |   Value of %comspec%, the SPECified secondary COMmand interpreter;<br>primarily for command line uses, e.g.&nbsp; <i>Run(@ComSpec &amp; " /k help | more")</i>]
@ComSpec
;
[@CPUArch |   Returns "X86" when the CPU is a 32-bit CPU and "X64" when the CPU is 64-bit.]
@CPUArch
;
[@CR |   Carriage return, Chr(13); sometimes used for line breaks.]
@CR
;
[@CRLF |   = @CR &amp; @LF ;occasionally used for line breaks.]
@CRLF
;
[@DesktopCommonDir |   Path to Desktop]
@DesktopCommonDir
;
[@DesktopDir |   Path to current user's Desktop]
@DesktopDir
;
[@DesktopHeight |   Height of the desktop screen in pixels. (Vertical resolution)]
@DesktopHeight
;
[@DesktopWidth |   Width of the desktop screen in pixels. (Horizontal resolution)]
@DesktopWidth
;
[@DesktopDepth |   Depth of the desktop screen in bits per pixel. ]
@DesktopDepth
;
[@DesktopRefresh |   Refresh rate of the desktop screen in hertz. ]
@DesktopRefresh
;
[@DocumentsCommonDir |   Path to Documents]
@DocumentsCommonDir
;
[@error |   Status of the error flag. See the SetError function.]
@error
;
[@exitCode |   Exit code as set by Exit statement.]
@exitCode
;
[@exitMethod |   Exit method.&nbsp; See the Func OnAutoItExitRegister().]
@exitMethod
;
[@extended |   Extended function return - used in certain functions such as StringReplace.]
@extended
;
[@FavoritesCommonDir |   Path to Favorites]
@FavoritesCommonDir
;
[@FavoritesDir |   Path to current user's Favorites]
@FavoritesDir
;
[@GUI_CtrlId |   Last click control identifier. Only valid in an event Function. See the GUICtrlSetOnEvent function.]
@GUI_CtrlId
;
[@GUI_CtrlHandle |   Last click control handle. Only valid in an event Function. See the GUICtrlSetOnEvent function.]
@GUI_CtrlHandle
;
[@GUI_DragId |   Drag control identifier. Only valid on Drop Event. See the GUISetOnEvent function.]
@GUI_DragId
;
[@GUI_DragFile |   Filename of the file being dropped. Only valid on Drop Event. See the GUISetOnEvent function.]
@GUI_DragFile
;
[@GUI_DropId |   Drop control identifier. Only valid on Drop Event. See the GUISetOnEvent function.]
@GUI_DropId
;
[@GUI_WinHandle |   Last click GUI window handle. Only valid in an event Function. See the GUICtrlSetOnEvent function.]
@GUI_WinHandle
;
[@HomeDrive |   Drive letter of drive containing current user's home directory.]
@HomeDrive
;
[@HomePath |   Directory part of current user's home directory. To get the full path, use in conjunction with @HomeDrive.]
@HomePath
;
[@HomeShare |   Server and share name containing current user's home directory.]
@HomeShare
;
[@HOUR |   Hours value of clock in 24-hour format. Range is 00 to 23]
@HOUR
;
[@HotKeyPressed |   Last hotkey pressed. See the HotKeySet function.]
@HotKeyPressed
;
[@IPAddress1 |   IP address of first network adapter. Tends to return 127.0.0.1 on some computers.<br>]
@IPAddress1
;
[@IPAddress2 |   IP address of second network adapter. Returns 0.0.0.0 if not applicable.]
@IPAddress2
;
[@IPAddress3 |   IP address of third network adapter. Returns 0.0.0.0 if not applicable.]
@IPAddress3
;
[@IPAddress4 |   IP address of fourth network adapter. Returns 0.0.0.0 if not applicable.]
@IPAddress4
;
[@KBLayout |   Returns code denoting Keyboard Layout. See <a href="appendix/OSLangCodes.htm">Appendix</a> for possible values.]
@KBLayout
;
[@LF |   Line feed, Chr(10); typically used for line breaks.]
@LF
;
[@LogonDNSDomain |   Logon DNS Domain.]
@LogonDNSDomain
;
[@LogonDomain |   Logon Domain.]
@LogonDomain
;
[@LogonServer |   Logon server.]
@LogonServer
;
[@MDAY |   Current day of month. Range is 01 to 31]
@MDAY
;
[@MIN |   Minutes value of clock. Range is 00 to 59]
@MIN
;
[@MON |   Current month. Range is 01 to 12]
@MON
;
[@MSEC |   Milliseconds value of clock.&nbsp; Range is 00 to 999. The update frequency of this value depends on the timer resolution of the hardware and may not update every millisecond.]
@MSEC
;
[@MUILang |   Returns code denoting Multi Language if available (Vista is OK by default). See <a href="appendix/OSLangCodes.htm">Appendix</a> for possible values.]
@MUILang
;
[@MyDocumentsDir |   Path to My Documents target]
@MyDocumentsDir
;
[@NumParams |   Number of parameters used to call the user functions]
@NumParams
;
[@OSArch |   Returns one of the following: &quot;X86&quot;, &quot;IA64&quot;, &quot;X64&quot;]
@OSArch
;
[@OSBuild |   Returns the OS build number. For example, Windows 2003 Server returns 3790]
@OSBuild
;
[@OSLang |   Returns code denoting OS Language.&nbsp; See <a href="appendix/OSLangCodes.htm">Appendix</a> for possible values.]
@OSLang
;
[@OSServicePack |   Service pack info in the form of &quot;Service Pack 3&quot;.]
@OSServicePack
;
[@OSType |   Returns "WIN32_NT" for NT/2000/XP/2003/Vista/2008/Win7/2008R2.]
@OSType
;
[@OSVersion |   Returns one of the following:&nbsp;&quot;WIN_2008R2&quot;, &quot;WIN_7&quot;, &quot;WIN_8&quot;, &quot;WIN_2008&quot;, &quot;WIN_VISTA&quot;, &quot;WIN_2003&quot;,]
@OSVersion
;
[@ProgramFilesDir |   Path to Program Files folder]
@ProgramFilesDir
;
[@ProgramsCommonDir |   Path to Start Menu's Programs folder]
@ProgramsCommonDir
;
[@ProgramsDir |   Path to current user's Programs (folder on Start Menu)]
@ProgramsDir
;
[@ScriptDir |   Directory containing the running script. (Result doesn't contain a trailing backslash)]
@ScriptDir
;
[@ScriptFullPath |   Equivalent to @ScriptDir &amp; "\" &amp; @ScriptName]
@ScriptFullPath
;
[@ScriptLineNumber |   Line number of the currently executed script line. Useful for debug]
@ScriptLineNumber
;
[@ScriptName |   Long filename of the running script.]
@ScriptName
;
[@SEC |   Seconds value of clock. Range is 00 to 59]
@SEC
;
[@StartMenuCommonDir |   Path to Start Menu folder]
@StartMenuCommonDir
;
[@StartMenuDir |   Path to current user's Start Menu]
@StartMenuDir
;
[@StartupCommonDir |   Path to Startup folder]
@StartupCommonDir
;
[@StartupDir |   current user's Startup folder]
@StartupDir
;
[@SW_DISABLE |   Disables the window.]
@SW_DISABLE
;
[@SW_ENABLE |   Enables the window.]
@SW_ENABLE
;
[@SW_HIDE |   Hides the window and activates another window.]
@SW_HIDE
;
[@SW_LOCK |   Lock the window to avoid repainting.]
@SW_LOCK
;
[@SW_MAXIMIZE |   Maximizes the specified window.]
@SW_MAXIMIZE
;
[@SW_MINIMIZE |   Minimizes the specified window and activates the next top-level window in the Z order.]
@SW_MINIMIZE
;
[@SW_RESTORE |   Activates and displays the window. If the window is minimized or maximized, the system restores it to its original size and position. An application should specify this flag when restoring a minimized window.]
@SW_RESTORE
;
[@SW_SHOW |   Activates the window and displays it in its current size and position.]
@SW_SHOW
;
[@SW_SHOWDEFAULT |   Sets the show state based on the SW_ value specified  by the program that started the application.]
@SW_SHOWDEFAULT
;
[@SW_SHOWMAXIMIZED |   Activates the window and displays it as a maximized window.]
@SW_SHOWMAXIMIZED
;
[@SW_SHOWMINIMIZED |   Activates the window and displays it as a minimized window.]
@SW_SHOWMINIMIZED
;
[@SW_SHOWMINNOACTIVE |   Displays the window as a minimized window. This value is similar to @SW_SHOWMINIMIZED, except the window is not activated.]
@SW_SHOWMINNOACTIVE
;
[@SW_SHOWNA |   Displays the window in its current size and position. This value is similar to @SW_SHOW, except the window is not activated.]
@SW_SHOWNA
;
[@SW_SHOWNOACTIVATE |   Displays a window in its most recent size and position. This value is similar to @SW_SHOWNORMAL, except the window is not activated.]
@SW_SHOWNOACTIVATE
;
[@SW_SHOWNORMAL |   Activates and displays a window. If the window is minimized or maximized, the system restores it to its original size and position. An application should specify this flag when displaying the window for the first time.]
@SW_SHOWNORMAL
;
[@SW_UNLOCK |   Unlock window to allow painting.]
@SW_UNLOCK
;
[@SystemDir |   Path to the Windows' System (or System32) folder]
@SystemDir
;
[@TAB |   Tab character, Chr(9)]
@TAB
;
[@TempDir |   Path to the temporary files folder.]
@TempDir
;
[@TRAY_ID |   Last clicked item identifier during a TraySet(Item)OnEvent action.]
@TRAY_ID
;
[@TrayIconFlashing |   Returns 1 if tray icon is flashing; otherwise, returns 0.]
@TrayIconFlashing
;
[@TrayIconVisible |   Returns 1 if tray icon is visible; otherwise, returns 0.]
@TrayIconVisible
;
[@UserProfileDir |   Path to current user's Profile folder.]
@UserProfileDir
;
[@UserName |   ID of the currently logged on user.]
@UserName
;
[@WDAY |   Numeric day of week. Range is 1 to 7 which corresponds to Sunday through Saturday.]
@WDAY
;
[@WindowsDir |   Path to Windows folder]
@WindowsDir
;
[@WorkingDir |   Current/active working directory. (Result doesn't contain a trailing backslash)]
@WorkingDir
;
[@YDAY |   Current day of year. Range is 001 to 366 (or 001 to 365 if not a leap year)]
@YDAY
;
[@YEAR |   Current four-digit year]
@YEAR
;
